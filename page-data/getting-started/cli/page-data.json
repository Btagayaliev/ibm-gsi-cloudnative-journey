{"componentChunkName":"component---src-pages-getting-started-cli-index-mdx","path":"/getting-started/cli/","result":{"pageContext":{"frontmatter":{"title":"Cloud Native Toolkit CLI"},"relativePagePath":"/getting-started/cli/index.mdx","titleType":"page","MdxNode":{"id":"ba855f8e-b63f-52e3-ba86-5a7ce7b6bfdf","children":[],"parent":"c61a32c4-f6d7-5aef-8117-9d33a1a92956","internal":{"content":"---\ntitle: Cloud Native Toolkit CLI\n---\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nThe <Globals name=\"shortName\" /> Command Line Interface (CLI)\n\n</PageDescription>\n\nThe <Globals name=\"longName\" /> includes the IBM Garage for Cloud (IGC) Command Line Interface (CLI). The [<Globals name=\"igccli\" />](https://github.com/ibm-garage-cloud/ibm-garage-cloud-cli) provides a set of helpful utilities that can be invoked from the command line. The main objective is to make complicated CLI tasks and `YAML`,`configMap`, and `secret` configuration easier for a developer.\n\nThese utilities include:\n- Register your application's git repo into a CI pipeline ([Jenkins](/guides/continuous-integration), [Tekton](/guides/continuous-integration-tekton), etc.)\n- List the ingress URLs for the tools installed in the environment\n- List the user names and passwords for the tools installed in the environment\n- Build and deploy images to the environment using the IBM Cloud Image Registry\n- Help copy `configMaps` and `secrets` into new projects/namespace in Kubernetes or OpenShift\n- Enable existing <Globals name=\"templates\" /> with the necessary artifacts to be integrated easily into the <Globals name=\"env\" />\n\nYou can either install the CLI onto your computer or install the Cloud Shell Commands environment.\n\n<Accordion>\n\n<AccordionItem title=\"Install the CLI\">\n\n<InlineNotification kind=\"warning\">\n**Warning:** If you have installed the **IGC** CLI up to `v0.4.0` you must\n uninstall it and follow the installation steps below\n`npm rm -g @garage-catalyst/ibm-garage-cloud-cli`\n</InlineNotification>\n\n- Install the CLI:\n    ```bash\n    npm i -g @ibmgaragecloud/cloud-native-toolkit-cli\n    ````\n\n- Verify the version:\n    ```bash\n    igc --version\n    ```\n\n</AccordionItem>\n\n<AccordionItem title=\"Install the Cloud Shell\">\n\nFollow the instructions in the [cloud-shell-commands readme](https://github.com/ibm-garage-cloud/cloud-shell-commands/blob/master/README.md) to install the Cloud Shell Commands.\n\n</AccordionItem>\n\n</Accordion>\n\n## CLI help\n\n- Run the CLI's help command to list the available commands:\n    ```bash\n    igc --help\n    ```\n\n    The help output looks like this:\n\n    ```bash\n    $ igc --help\n    IBM Garage Cloud CLI\n\n    Usage: igc <command> [args]\n\n    Commands:\n      igc build              Build the image and push it into the IBM Cloud registry\n      igc create-webhook     Create a git webhook for a given Jenkins pipeline\n      igc credentials        Lists the urls and credentials for the tools deployed\n                             to the cluster\n      igc dashboard          Open the dashboard url in the default browser\n      igc deploy             Deploy an image from the IBM Cloud registry into a\n                             kubernetes cluster\n      igc enable             Enable the current repository with pipeline logic\n      igc endpoints          List the current ingress hosts for deployed apps in a\n                             namespace       [aliases: ingress, endpoint, ingresses]\n      igc generate-token     Generate a Jenkins api token\n      igc git-secret [name]  Create a kubernetes secret that contains the url,\n                             username, and personal access token for a git repo\n      igc jenkins-auth       Generate a Jenkins api token and register it as\n                             kubernetes secret\n      igc launch-tools       Launch the IBM Garage for Cloud tools image connected\n                             to the current directory\n      igc login              Log in using the ibmcloud cli, optionally configure the\n                             cluster, and optionally runs a command\n      igc namespace          Create a namespace (if it doesn't exist) and prepare it\n                             with the necessary configuration\n      igc pipeline           Register a pipeline for the current code repository\n      igc tool-config        Create the config map and secret for a tool configured\n                             in the environment\n      igc vlan               Print out the vlan values\n      igc yq <command>\n\n    Options:\n      --version  Show version number                                       [boolean]\n      --help     Show help                                                 [boolean]\n    ```\n\n## Use the CLI\n\n<InlineNotification>\n\nTo use the <Globals name=\"igccli\" />, first install the [prerequisite tools](/getting-started/prereqs), which include:\n- The <Globals name=\"ic\" /> CLI\n- The <Globals name=\"kube\" /> CLI\n- The <Globals name=\"ocp\" /> CLI\n\n</InlineNotification>\n\nTo use the <Globals name=\"igccli\" />, you must be logged into your <Globals name=\"ic\" /> account and cluster.\n\n- Log into your <Globals name=\"ic\" /> account with the correct region and resource group:\n    ```bash\n    ibmcloud login -a cloud.ibm.com -r <region> -g <resource group>\n    ```\n\n- Log into your cluster:\n\n<Accordion>\n\n<AccordionItem title=\"Kubernetes\">\n\n```bash\nibmcloud ks cluster config --cluster <CLUSTER>\n```\n\n</AccordionItem>\n\n<AccordionItem title=\"OpenShift\">\n\n```bash\noc login --server=<url> --token=<apikey>\n```\n</AccordionItem>\n\n</Accordion>\n\nOnce logged in, you can use the CLI commands.\n\n- For example, this command lists the dashboard ingress URLs for all of the install tools in the tools namespace:\n    ```bash\n    igc endpoints -n tools\n    ```\n\n## Available commands\n\n### vlan\n\nLists the `vlans` for a particular `resource group` and `region`. The command\nexpects that an `ibmcloud login` has already been performed to set up the\nenvironment. This information is useful for preparing Terraform cluster creation steps\n\n### credentials\n\nPrints the urls and credentials for the tools deployed into the cluster.\nThis includes Jenkins, Argo CD, and SonarQube, Pact, Artifactory.\n\n### ingress\n\nLists the ingress urls for the provided namespace. If no namespace\nis provided, `dev` is used.\n\n### namespace\n\nCreates a new namespace/project in your cluster and copies the necessary `configMaps` and `secrets` from the `tools` namespace.\nThis enables new pipelines to be registered and run and for them to have access to all the essential data needed to access the tools and the <Globals name=\"ic\" /> platfrom.\n\n```bash\nigc namespace dev-team-a\n```\n\n### pipeline\n\nRegisters a git repository project as a Jenkins pipeline by creating a Kubernetes secret to hold\nthe Git authentication information, calling the Jenkins API, and creating a web-hook.\nThis command is intended to be run within the repository directory of a project for\nwhich a pipeline should be generated. You can supply a new namespace for your pipeline\n\n```\nigc pipeline -n dev-team-a\n```\n\n\nThe pipeline command supports both `jenkins` and `tekton` pipelines using the flags `--jenkins` or `--tekton`,\nrespectively.  Jenkins is the default if no value is provided.\n\n```\nigc pipeline -n dev-team-a --tekton\n```\n\n### tools\n\nLaunches the `ibm-garage-cli-tools` docker image in an interactive\nterminal. This image provides commonly used infrastructure tools like,\n`terraform`, `kubectl`, `oc` etc.\n\n### enable\n\n\"Enables\" an existing project with the DevOps artifacts. The CLI reads the\n list of\n available pipelines and applies the selected pipeline to your code repo. This\n  command is\n  intended to be run within a git repository directory of a project for\nwhich a pipeline should be enabled.\n```bash\nigc enable\n```\n\nOnce the project has been enabled you will need to run `igc pipeline` to\n register the git repo as a pipeline with your target development cluster.\n\nThe `enable` command adds a number of files to the local filesystem, including but not limited to:\n\n- Helm chart\n- Dockerfile\n- Jenkinsfile\n\nAfter `enable` is called, the generated files should be committed and pushed to the git repository.\n\nThe default pipeline repo is `https://ibm-garage-cloud.github.io/garage-pipelines/`, but a different one can be used by providing the `--repo` argument.  The source for the provided pipeline repo can be found at `https://github.com/ibm-garage-cloud/garage-pipelines` to use as a template.\n","type":"Mdx","contentDigest":"46b5f2029966316e86d1cd6f8e3e032a","counter":567,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Cloud Native Toolkit CLI"},"exports":{},"rawBody":"---\ntitle: Cloud Native Toolkit CLI\n---\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nThe <Globals name=\"shortName\" /> Command Line Interface (CLI)\n\n</PageDescription>\n\nThe <Globals name=\"longName\" /> includes the IBM Garage for Cloud (IGC) Command Line Interface (CLI). The [<Globals name=\"igccli\" />](https://github.com/ibm-garage-cloud/ibm-garage-cloud-cli) provides a set of helpful utilities that can be invoked from the command line. The main objective is to make complicated CLI tasks and `YAML`,`configMap`, and `secret` configuration easier for a developer.\n\nThese utilities include:\n- Register your application's git repo into a CI pipeline ([Jenkins](/guides/continuous-integration), [Tekton](/guides/continuous-integration-tekton), etc.)\n- List the ingress URLs for the tools installed in the environment\n- List the user names and passwords for the tools installed in the environment\n- Build and deploy images to the environment using the IBM Cloud Image Registry\n- Help copy `configMaps` and `secrets` into new projects/namespace in Kubernetes or OpenShift\n- Enable existing <Globals name=\"templates\" /> with the necessary artifacts to be integrated easily into the <Globals name=\"env\" />\n\nYou can either install the CLI onto your computer or install the Cloud Shell Commands environment.\n\n<Accordion>\n\n<AccordionItem title=\"Install the CLI\">\n\n<InlineNotification kind=\"warning\">\n**Warning:** If you have installed the **IGC** CLI up to `v0.4.0` you must\n uninstall it and follow the installation steps below\n`npm rm -g @garage-catalyst/ibm-garage-cloud-cli`\n</InlineNotification>\n\n- Install the CLI:\n    ```bash\n    npm i -g @ibmgaragecloud/cloud-native-toolkit-cli\n    ````\n\n- Verify the version:\n    ```bash\n    igc --version\n    ```\n\n</AccordionItem>\n\n<AccordionItem title=\"Install the Cloud Shell\">\n\nFollow the instructions in the [cloud-shell-commands readme](https://github.com/ibm-garage-cloud/cloud-shell-commands/blob/master/README.md) to install the Cloud Shell Commands.\n\n</AccordionItem>\n\n</Accordion>\n\n## CLI help\n\n- Run the CLI's help command to list the available commands:\n    ```bash\n    igc --help\n    ```\n\n    The help output looks like this:\n\n    ```bash\n    $ igc --help\n    IBM Garage Cloud CLI\n\n    Usage: igc <command> [args]\n\n    Commands:\n      igc build              Build the image and push it into the IBM Cloud registry\n      igc create-webhook     Create a git webhook for a given Jenkins pipeline\n      igc credentials        Lists the urls and credentials for the tools deployed\n                             to the cluster\n      igc dashboard          Open the dashboard url in the default browser\n      igc deploy             Deploy an image from the IBM Cloud registry into a\n                             kubernetes cluster\n      igc enable             Enable the current repository with pipeline logic\n      igc endpoints          List the current ingress hosts for deployed apps in a\n                             namespace       [aliases: ingress, endpoint, ingresses]\n      igc generate-token     Generate a Jenkins api token\n      igc git-secret [name]  Create a kubernetes secret that contains the url,\n                             username, and personal access token for a git repo\n      igc jenkins-auth       Generate a Jenkins api token and register it as\n                             kubernetes secret\n      igc launch-tools       Launch the IBM Garage for Cloud tools image connected\n                             to the current directory\n      igc login              Log in using the ibmcloud cli, optionally configure the\n                             cluster, and optionally runs a command\n      igc namespace          Create a namespace (if it doesn't exist) and prepare it\n                             with the necessary configuration\n      igc pipeline           Register a pipeline for the current code repository\n      igc tool-config        Create the config map and secret for a tool configured\n                             in the environment\n      igc vlan               Print out the vlan values\n      igc yq <command>\n\n    Options:\n      --version  Show version number                                       [boolean]\n      --help     Show help                                                 [boolean]\n    ```\n\n## Use the CLI\n\n<InlineNotification>\n\nTo use the <Globals name=\"igccli\" />, first install the [prerequisite tools](/getting-started/prereqs), which include:\n- The <Globals name=\"ic\" /> CLI\n- The <Globals name=\"kube\" /> CLI\n- The <Globals name=\"ocp\" /> CLI\n\n</InlineNotification>\n\nTo use the <Globals name=\"igccli\" />, you must be logged into your <Globals name=\"ic\" /> account and cluster.\n\n- Log into your <Globals name=\"ic\" /> account with the correct region and resource group:\n    ```bash\n    ibmcloud login -a cloud.ibm.com -r <region> -g <resource group>\n    ```\n\n- Log into your cluster:\n\n<Accordion>\n\n<AccordionItem title=\"Kubernetes\">\n\n```bash\nibmcloud ks cluster config --cluster <CLUSTER>\n```\n\n</AccordionItem>\n\n<AccordionItem title=\"OpenShift\">\n\n```bash\noc login --server=<url> --token=<apikey>\n```\n</AccordionItem>\n\n</Accordion>\n\nOnce logged in, you can use the CLI commands.\n\n- For example, this command lists the dashboard ingress URLs for all of the install tools in the tools namespace:\n    ```bash\n    igc endpoints -n tools\n    ```\n\n## Available commands\n\n### vlan\n\nLists the `vlans` for a particular `resource group` and `region`. The command\nexpects that an `ibmcloud login` has already been performed to set up the\nenvironment. This information is useful for preparing Terraform cluster creation steps\n\n### credentials\n\nPrints the urls and credentials for the tools deployed into the cluster.\nThis includes Jenkins, Argo CD, and SonarQube, Pact, Artifactory.\n\n### ingress\n\nLists the ingress urls for the provided namespace. If no namespace\nis provided, `dev` is used.\n\n### namespace\n\nCreates a new namespace/project in your cluster and copies the necessary `configMaps` and `secrets` from the `tools` namespace.\nThis enables new pipelines to be registered and run and for them to have access to all the essential data needed to access the tools and the <Globals name=\"ic\" /> platfrom.\n\n```bash\nigc namespace dev-team-a\n```\n\n### pipeline\n\nRegisters a git repository project as a Jenkins pipeline by creating a Kubernetes secret to hold\nthe Git authentication information, calling the Jenkins API, and creating a web-hook.\nThis command is intended to be run within the repository directory of a project for\nwhich a pipeline should be generated. You can supply a new namespace for your pipeline\n\n```\nigc pipeline -n dev-team-a\n```\n\n\nThe pipeline command supports both `jenkins` and `tekton` pipelines using the flags `--jenkins` or `--tekton`,\nrespectively.  Jenkins is the default if no value is provided.\n\n```\nigc pipeline -n dev-team-a --tekton\n```\n\n### tools\n\nLaunches the `ibm-garage-cli-tools` docker image in an interactive\nterminal. This image provides commonly used infrastructure tools like,\n`terraform`, `kubectl`, `oc` etc.\n\n### enable\n\n\"Enables\" an existing project with the DevOps artifacts. The CLI reads the\n list of\n available pipelines and applies the selected pipeline to your code repo. This\n  command is\n  intended to be run within a git repository directory of a project for\nwhich a pipeline should be enabled.\n```bash\nigc enable\n```\n\nOnce the project has been enabled you will need to run `igc pipeline` to\n register the git repo as a pipeline with your target development cluster.\n\nThe `enable` command adds a number of files to the local filesystem, including but not limited to:\n\n- Helm chart\n- Dockerfile\n- Jenkinsfile\n\nAfter `enable` is called, the generated files should be committed and pushed to the git repository.\n\nThe default pipeline repo is `https://ibm-garage-cloud.github.io/garage-pipelines/`, but a different one can be used by providing the `--repo` argument.  The source for the provided pipeline repo can be found at `https://github.com/ibm-garage-cloud/garage-pipelines` to use as a template.\n","fileAbsolutePath":"/Users/mjperrins/projects/gsi/ibm-gsi-cloudnative-journey/src/pages/getting-started/cli/index.mdx"}}}}